<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**VARIABLES**

xvel = 0;
yvel = 0;
xtarvel = 0;
ytarvel = 0;
xtartarvel = 0;
ytartarvel = 0;
xace = 0;
yace = 0;
candy = 0;
invultimer = 0;
batterytimer = 0;
batterytimerratio = 0;
lives = STARTING_LIVES;

//**GLOBAL VARIABLES**

global.lightradiusbonus = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**Acceleration**

//set x target target velocity
if keyboard_check(ord("A")) &amp;&amp; !keyboard_check(ord("D")){
    xtartarvel = -MAX_SPEED;
    image_xscale = -abs(image_xscale);
} else if keyboard_check(ord("D")) &amp;&amp; !keyboard_check(ord("A")){
    xtartarvel = MAX_SPEED;
    image_xscale = abs(image_xscale);
} else {
    xtartarvel = 0;
}

//set y target target velocity
if keyboard_check(ord("W")) &amp;&amp; !keyboard_check(ord("S")){
    ytartarvel = -MAX_SPEED;
} else if keyboard_check(ord("S")) &amp;&amp; !keyboard_check(ord("W")){
    ytartarvel = MAX_SPEED;
} else {
    ytartarvel = 0;
}

//find target velocities
var vectorlen = sqrt(sqr(xtartarvel) + sqr(ytartarvel));
var xratio = 0; 
var yratio = 0; 
if(vectorlen != 0){
    xratio = xtartarvel / vectorlen;
    yratio = ytartarvel / vectorlen;
    xtarvel = MAX_SPEED * xratio;
    ytarvel = MAX_SPEED * yratio;
} else {
    xtarvel = 0;
    ytarvel = 0;
}
//find accelerations
vectorlen = sqrt(sqr(xtarvel - xvel) + sqr(ytarvel - yvel));

if(vectorlen != 0){
    xratio = (xtarvel - xvel) / vectorlen;
    yratio = (ytarvel - yvel) / vectorlen;
    xace = ACCELERATION * xratio;
    yace = ACCELERATION * yratio;
} else {
    xace = 0;
    yace = 0;
}

//update x velocity
if(xvel != xtarvel &amp;&amp; sign(xvel-xtarvel) == sign((xvel+xace)-xtarvel))
    xvel += xace;
else
    xvel = xtarvel;

    
//update y velocity
if(yvel != ytarvel &amp;&amp; sign(yvel-ytarvel) == sign((yvel+yace)-ytarvel))
    yvel += yace;
else
    yvel = ytarvel;

//**Collision**

//collision check
var colobj = instance_place(x+xvel,y,Wall);

while(colobj != noone &amp;&amp; xvel != 0){ //if there has been an x collision
    if(xvel &gt; 0)
        xvel-=0.1;
    else if(xvel &lt; 0)
        xvel+=0.1;
    if(abs(xvel)&lt;0.1)
        xvel = 0;
    colobj = instance_place(x+xvel,y,Wall);
}

colobj = instance_place(x,y+yvel,Wall);

while(colobj != noone &amp;&amp; yvel != 0){ //if there has been a y collision
    if(yvel &gt; 0)
        yvel-=0.1;
    else if(yvel&lt;0)
        yvel+=0.1;
    if(abs(yvel)&lt;0.1)
        yvel = 0;
    colobj = instance_place(x,y+yvel,Wall);
}

var colobj = instance_place(x+xvel,y+yvel,Wall);

while(colobj != noone &amp;&amp; (xvel != 0 || yvel != 0)){ //if there has been a diagonal collision
    if(xvel &gt; 0)
        xvel-=0.1;
    else if(xvel &lt; 0)
        xvel+=0.1;
    if(yvel &gt; 0)
        yvel-=0.1;
    else if(yvel&lt;0)
        yvel+=0.1;
    if(abs(xvel)&lt;0.1)
        xvel = 0;
    if(abs(yvel)&lt;0.1)
        yvel = 0;
    colobj = instance_place(x+xvel,y+yvel,Wall);
}

//**Animation**

if(abs(xvel)&gt;.1||abs(yvel)&gt;.1){
    sprite_index = s_player_walking;
    image_speed = sqrt(sqr(xvel) + sqr(yvel)) / MAX_SPEED * WALKING_ANIMATION_SPEED_MAX;
} else
    sprite_index = s_player;

//**Movement**

//update x position
x += xvel;
Light.x += xvel;

//update y position
y += yvel;
Light.y += yvel;

//**Candy Get**
colobj = instance_place(x,y,Candy);
if(colobj!=noone){
    instance_destroy(colobj);
    candy++;
}

//**Battery Get**
colobj = instance_place(x,y,Battery);
if(colobj!=noone){
    instance_destroy(colobj);
    batterytimer = room_speed * BATTERY_TIMER;
    
}

//While battery timer on
if(batterytimer&gt;0){
    batterytimer--;
    batterytimerratio = ((room_speed * BATTERY_TIMER)-batterytimer)/(room_speed * BATTERY_TIMER);
    if(batterytimerratio &lt; .1)
        global.lightradiusbonus = batterytimerratio * 10 * (LIGHT_BATTERY_RADIUS - LIGHT_RADIUS);
    else if(batterytimerratio &gt; .9)
        global.lightradiusbonus = 10*(1-batterytimerratio) * (LIGHT_BATTERY_RADIUS - LIGHT_RADIUS);
    else
        global.lightradiusbonus = LIGHT_BATTERY_RADIUS - LIGHT_RADIUS;
} else {
    global.lightradiusbonus = 0;
}

//**Ghost Collision**
colobj = instance_place(x,y,Ghost);
if(colobj!=noone &amp;&amp; colobj.sprite_index != s_ghost_poof &amp;&amp; invultimer == 0){
    if(lives&gt;0){
        invultimer = room_speed * INVULNERABILITY_TIMER;
        colobj.sprite_index = s_ghost_poof;
        colobj.image_index = 0;
        lives -= 1;
        Ghost.xvel = 0;
        Ghost.yvel = 0;
        Light.x = x;
        Light.y = y;
        Light.xvel = 0;
        Light.yvel = 0;
    } else {
        //end game
    }
}

//While invulnerability timer on
if(invultimer&gt;0){
    if(invultimer%3==0)
        image_alpha=0;
    else
        image_alpha=255;
    invultimer--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
