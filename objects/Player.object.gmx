<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_player</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**VARIABLES**

xvel = 0;
yvel = 0;
xtarvel = 0;
ytarvel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**Acceleration**

//set x target velocity
if keyboard_check(ord("A")) &amp;&amp; !keyboard_check(ord("D")){
    xtarvel = -MAX_SPEED;
    image_xscale = -1;
} else if keyboard_check(ord("D")) &amp;&amp; !keyboard_check(ord("A")){
    xtarvel = MAX_SPEED;
    image_xscale = 1;
} else {
    xtarvel = 0;
}

//set y target velocity
if keyboard_check(ord("W")) &amp;&amp; !keyboard_check(ord("S")){
    ytarvel = -MAX_SPEED;
} else if keyboard_check(ord("S")) &amp;&amp; !keyboard_check(ord("W")){
    ytarvel = MAX_SPEED;
} else {
    ytarvel = 0;
}

//update x velocity
if(xvel &lt; xtarvel &amp;&amp; xvel + ACCELERATION &lt;= xtarvel)
    xvel += ACCELERATION;
else if(xvel &lt; xtarvel &amp;&amp; xvel + ACCELERATION &gt; xtarvel)
    xvel = xtarvel;
else if(xvel &gt; xtarvel &amp;&amp; xvel - ACCELERATION &gt;= xtarvel)
    xvel -= ACCELERATION;
else if(xvel &gt; xtarvel &amp;&amp; xvel - ACCELERATION &lt; xtarvel)
    xvel = xtarvel;

if(xvel &gt; MAX_SPEED)
    xvel = MAX_SPEED;
else if(xvel &lt; -MAX_SPEED)
    xvel = -MAX_SPEED;
    
//update y velocity
if(yvel &lt; ytarvel &amp;&amp; yvel + ACCELERATION &lt;= ytarvel)
    yvel += ACCELERATION;
else if(yvel &lt; ytarvel &amp;&amp; yvel + ACCELERATION &gt; ytarvel)
    yvel = ytarvel;
else if(yvel &gt; ytarvel &amp;&amp; yvel - ACCELERATION &gt;= ytarvel)
    yvel -= ACCELERATION;
else if(yvel &gt; ytarvel &amp;&amp; yvel - ACCELERATION &lt; ytarvel)
    yvel = ytarvel;

if(yvel &gt; MAX_SPEED)
    yvel = MAX_SPEED;
else if(yvel &lt; -MAX_SPEED){
    yvel = -MAX_SPEED;
}

//TODO: NORMALIZE

//**Collision**

//collision check
var colobj = instance_place(x+xvel,y,Wall);

while(colobj != noone &amp;&amp; xvel != 0){ //if there has been an x collision
    if(xvel &gt; 0)
        xvel-=0.1;
    else if(xvel &lt; 0)
        xvel+=0.1;
    if(abs(xvel)&lt;0.1)
        xvel = 0;
    colobj = instance_place(x+xvel,y,Wall);
}

colobj = instance_place(x,y+yvel,Wall);

while(colobj != noone &amp;&amp; yvel != 0){ //if there has been a y collision
    if(yvel &gt; 0)
        yvel-=0.1;
    else if(yvel&lt;0)
        yvel+=0.1;
    if(abs(yvel)&lt;0.1)
        yvel = 0;
    colobj = instance_place(x,y+yvel,Wall);
}

var colobj = instance_place(x+xvel,y+yvel,Wall);

while(colobj != noone &amp;&amp; (xvel != 0 || yvel != 0)){ //if there has been a diagonal collision
    if(xvel &gt; 0)
        xvel-=0.1;
    else if(xvel &lt; 0)
        xvel+=0.1;
    if(yvel &gt; 0)
        yvel-=0.1;
    else if(yvel&lt;0)
        yvel+=0.1;
    if(abs(xvel)&lt;0.1)
        xvel = 0;
    if(abs(yvel)&lt;0.1)
        yvel = 0;
    colobj = instance_place(x+xvel,y+yvel,Wall);
}

//**Animation**

if(abs(xvel)&gt;1||abs(yvel)&gt;.1){
    sprite_index = s_player_walking;
    animation_speed = sqrt(sqr(xvel) + sqr(yvel)) * WALKING_ANIMATION_SPEED_MODIFIER;
} else
    sprite_index = s_player;

//**Movement**

//update x position
x += xvel;

//update y position
y += yvel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
