<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_ghost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_index = s_ghost_moving //remove if ghost ever stops moving

//**Variables**

xvel = 0;
yvel = 0;
xtarvel = 0;
ytarvel = 0;
xace = 0;
yace = 0;
originx = x;
originy = y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//**Acceleration**

//find target velocities
var vectorlen = sqrt(sqr(Player.x-x) + sqr(Player.y-y));
var xratio = 0;
var yratio = 0;
if(vectorlen != 0){
    xratio = (Player.x-x) / vectorlen;
    yratio = (Player.y-y) / vectorlen;
    xtarvel = GHOST_MAX_SPEED * xratio;
    ytarvel = GHOST_MAX_SPEED * yratio;
} else {
    xtarvel = 0;
    ytarvel = 0;
}

//find accelerations
vectorlen = sqrt(sqr(xtarvel - xvel) + sqr(ytarvel - yvel));

if(vectorlen != 0){
    xratio = (xtarvel - xvel) / vectorlen;
    yratio = (ytarvel - yvel) / vectorlen;
    xace = GHOST_ACCELERATION * xratio;
    yace = GHOST_ACCELERATION * yratio;
} else {
    xace = 0;
    yace = 0;
}

//update x velocity
if(xvel != xtarvel &amp;&amp; sign(xvel-xtarvel) == sign((xvel+xace)-xtarvel))
    xvel += xace;
else
    xvel = xtarvel;
    
//update y velocity
if(yvel != ytarvel &amp;&amp; sign(yvel-ytarvel) == sign((yvel+yace)-ytarvel))
    yvel += yace;
else
    yvel = ytarvel;

/* old acceleration code, might be less precise but might also be more ghostlike
//find target velocities
var vectorlen = sqrt(sqr(Player.x-x) + sqr(Player.y-y));
xtarvel = GHOST_MAX_SPEED / vectorlen * (Player.x-x);
ytarvel = GHOST_MAX_SPEED / vectorlen * (Player.y-y);

//find accelerations

xace = GHOST_ACCELERATION / vectorlen * xtarvel;
yace = GHOST_ACCELERATION / vectorlen * ytarvel;

//update x velocity
if(abs(xvel + xace) &lt; abs(xtarvel))
    xvel += xace;
else
    xvel = xtarvel;

    
//update y velocity
if(abs(yvel + yace) &lt; abs(ytarvel))
    yvel += yace;
else
    yvel = ytarvel;
*/

//**Animation**

if(xvel&gt;0)
    image_xscale = -1;
else
    image_xscale = 1;

//sprite_index = s_ghost_moving; //read if ghost ever stops moving
image_speed = sqrt(sqr(xvel) + sqr(yvel)) / GHOST_MAX_SPEED * GHOST_MOVING_ANIMATION_SPEED_MAX;

//**Movement**

//update x position
x += xvel;

//update y position
y += yvel;

//**Death**

if(sprite_index==s_ghost_poof&amp;&amp;floor(image_index)==15){
    x = originx;
    y = originy;
    sprite_index = s_ghost_moving;
    image_index = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
